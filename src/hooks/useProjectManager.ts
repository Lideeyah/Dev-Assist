import { useState, useCallback } from "react";
import { api } from "@/lib/api";

interface GeneratedProject {
  projectId: string;
  files: Array<{
    filename: string;
    content: string;
    language: string;
  }>;
  mainFile: string;
}

export function useProjectManager() {
  const [currentProject, setCurrentProject] = useState<any>(null);
  const [files, setFiles] = useState<any[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const extractJSONFromResponse = (response: string): any => {
    try {
      // Try to parse directly first
      return JSON.parse(response);
    } catch (e) {
      // If direct parsing fails, try to extract JSON from markdown code blocks
      const jsonMatch = response.match(/```(?:json)?\s*([\s\S]*?)\s*```/) || response.match(/{[\s\S]*}/);

      if (jsonMatch) {
        const jsonString = jsonMatch[1] || jsonMatch[0];
        try {
          return JSON.parse(jsonString.trim());
        } catch (parseError) {
          console.error("Failed to parse extracted JSON:", parseError);
        }
      }

      // If all else fails, try to find any JSON-like structure
      const braceMatch = response.match(/{[^{}]*}/);
      if (braceMatch) {
        try {
          return JSON.parse(braceMatch[0]);
        } catch (parseError) {
          console.error("Failed to parse brace-matched JSON:", parseError);
        }
      }

      throw new Error("Could not extract valid JSON from AI response");
    }
  };

  const generateProjectFromPrompt = useCallback(async (prompt: string): Promise<GeneratedProject> => {
    setIsGenerating(true);
    try {
      // Generate project structure using AI with a more specific prompt
      const aiResponse = await api.generateAIResponse(
        `Create a complete landing page project for: ${prompt}. 
         Return ONLY valid JSON with this exact structure - no additional text or explanations:
         {
           "projectName": "Descriptive Project Name",
           "files": [
             {
               "filename": "index.html",
               "content": "<!DOCTYPE html><html><head><title>Page Title</title><link rel='stylesheet' href='styles.css'></head><body><h1>Welcome</h1><script src='script.js'></script></body></html>",
               "language": "html"
             },
             {
               "filename": "styles.css", 
               "content": "body { margin: 0; font-family: Arial, sans-serif; } h1 { color: #333; }",
               "language": "css"
             },
             {
               "filename": "script.js",
               "content": "console.log('Hello World'); document.addEventListener('DOMContentLoaded', function() { /* your code */ });",
               "language": "javascript"
             }
           ],
           "mainFile": "index.html"
         }`,
        "generate"
      );

      console.log("AI Response:", aiResponse.response);

      // Parse the AI response
      let projectData;
      try {
        projectData = extractJSONFromResponse(aiResponse.response);

        // Validate the project data structure
        if (!projectData || !projectData.files || !Array.isArray(projectData.files)) {
          throw new Error("Invalid project structure in AI response");
        }

        // Ensure we have at least an HTML file
        const hasHtmlFile = projectData.files.some((file: any) => file.filename.endsWith(".html") || file.language === "html");

        if (!hasHtmlFile) {
          // If no HTML file, create a basic one
          projectData.files.unshift({
            filename: "index.html",
            content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectData.projectName || "Generated Landing Page"}</title>
    <style>body { margin: 0; font-family: Arial, sans-serif; background: #f5f5f5; }</style>
</head>
<body>
    <div style="padding: 20px; text-align: center;">
        <h1>Welcome to ${projectData.projectName || "Your Landing Page"}</h1>
        <p>This page was generated by DevAssist AI</p>
    </div>
</body>
</html>`,
            language: "html",
          });
          projectData.mainFile = "index.html";
        }
      } catch (e) {
        console.error("Failed to parse AI response:", e);

        // Fallback: Create a basic project structure
        projectData = {
          projectName: prompt.substring(0, 30) + " Landing Page",
          files: [
            {
              filename: "index.html",
              content: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${prompt.substring(0, 20)} Landing Page</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Welcome to Our ${prompt}</h1>
            <p>This landing page was AI-generated by DevAssist</p>
        </header>
        <main>
            <section class="hero">
                <h2>Amazing Features</h2>
                <p>Discover what makes us special</p>
            </section>
        </main>
    </div>
    <script src="script.js"></script>
</body>
</html>`,
              language: "html",
            },
            {
              filename: "styles.css",
              content: `body {
    margin: 0;
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    text-align: center;
    padding: 60px 20px;
    color: white;
}

header h1 {
    font-size: 3rem;
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

header p {
    font-size: 1.2rem;
    opacity: 0.9;
}

.hero {
    background: white;
    padding: 40px;
    border-radius: 10px;
    margin: 20px 0;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    text-align: center;
}

.hero h2 {
    color: #667eea;
    margin-bottom: 20px;
}

@media (max-width: 768px) {
    header h1 {
        font-size: 2rem;
    }
    
    .container {
        padding: 10px;
    }
}`,
              language: "css",
            },
            {
              filename: "script.js",
              content: `console.log('Landing page loaded successfully!');

document.addEventListener('DOMContentLoaded', function() {
    // Add any interactive functionality here
    console.log('DOM fully loaded and parsed');
    
    // Example: Smooth scrolling for anchor links
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
});`,
              language: "javascript",
            },
          ],
          mainFile: "index.html",
        };
      }

      // Create project in backend
      const project = await api.createProject({
        name: projectData.projectName || "Generated Landing Page",
        description: `Project generated from prompt: ${prompt}`,
        language: "html",
        tags: ["ai-generated", "landing-page"],
        isPublic: false,
      });

      // Create all files
      const createdFiles = [];
      for (const file of projectData.files || []) {
        try {
          const createdFile = await api.createFile(project._id, {
            filename: file.filename,
            content: file.content,
            mimeType: file.language ? `text/${file.language}` : undefined,
          });
          createdFiles.push(createdFile);
        } catch (error) {
          console.error(`Failed to create file ${file.filename}:`, error);
        }
      }

      // If no files were created successfully, create at least a basic HTML file
      if (createdFiles.length === 0) {
        const fallbackFile = await api.createFile(project._id, {
          filename: "index.html",
          content: `<!DOCTYPE html>
<html>
<head>
    <title>Fallback Landing Page</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 40px;
            text-align: center;
            background: #f0f0f0;
        }
        h1 { color: #333; }
    </style>
</head>
<body>
    <h1>Welcome to Your Landing Page</h1>
    <p>This is a fallback page generated by DevAssist</p>
</body>
</html>`,
        });
        createdFiles.push(fallbackFile);
        projectData.mainFile = "index.html";
      }

      setCurrentProject(project);
      setFiles(createdFiles);

      return {
        projectId: project._id,
        files: createdFiles,
        mainFile: projectData.mainFile || "index.html",
      };
    } catch (error) {
      console.error("Project generation failed:", error);
      throw new Error("Failed to generate project. Please try a different prompt or try again later.");
    } finally {
      setIsGenerating(false);
    }
  }, []);

  const loadProjectFiles = useCallback(async (projectId: string) => {
    try {
      const projectFiles = await api.getProjectFiles(projectId);
      setFiles(projectFiles);
      return projectFiles;
    } catch (error) {
      console.error("Failed to load project files:", error);
      throw error;
    }
  }, []);

  return {
    currentProject,
    files,
    isGenerating,
    generateProjectFromPrompt,
    loadProjectFiles,
    setCurrentProject,
    setFiles,
  };
}
